name: Build and Deploy

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code quality and testing
  test:
    name: Test and Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run TypeScript check
      run: npx tsc --noEmit

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Run build
      run: npm run build

    - name: Test health endpoint compilation
      run: |
        # Compile the health endpoint to check for errors
        npx tsc src/app/api/health/route.ts --noEmit --skipLibCheck

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true

    - name: Run Trivy vulnerability scanner (filesystem)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker build and test
  docker:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: runner
        push: false
        tags: test-image
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production

    - name: Test Docker image
      run: |
        # Start test containers
        docker network create test-network || true

        # Start test database
        docker run -d \
          --name test-db \
          --network test-network \
          -e POSTGRES_DB=test_db \
          -e POSTGRES_USER=test_user \
          -e POSTGRES_PASSWORD=test_password \
          postgres:15-alpine

        # Wait for database
        sleep 15

        # Start application
        docker run -d \
          --name test-app \
          --network test-network \
          -p 3000:3000 \
          -e NODE_ENV=production \
          -e DATABASE_URL="postgresql://test_user:test_password@test-db:5432/test_db" \
          -e NEXTAUTH_SECRET="test-secret" \
          -e NEXTAUTH_URL="http://localhost:3000" \
          test-image

        # Wait for app to start
        sleep 20

        # Test health endpoint
        timeout 30s bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'

        # Check image size
        IMAGE_SIZE=$(docker images test-image --format "table {{.Size}}" | tail -n +2)
        echo "Docker image size: $IMAGE_SIZE"

        # Cleanup
        docker stop test-app test-db || true
        docker rm test-app test-db || true
        docker network rm test-network || true

    - name: Push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        target: runner
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # This could be deploying to a staging server, running docker-compose, etc.

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, docker, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    # Vercel deployment example
    - name: Deploy to Vercel
      if: ${{ vars.DEPLOYMENT_PLATFORM == 'vercel' }}
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'

    # Railway deployment example
    - name: Deploy to Railway
      if: ${{ vars.DEPLOYMENT_PLATFORM == 'railway' }}
      uses: railway-app/railway-deploy@main
      with:
        railway-token: ${{ secrets.RAILWAY_TOKEN }}
        service: ${{ vars.RAILWAY_SERVICE }}

    # Docker deployment example
    - name: Deploy with Docker
      if: ${{ vars.DEPLOYMENT_PLATFORM == 'docker' }}
      run: |
        # Configure SSH
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key

        # Deploy to server
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }} << 'EOF'
          cd ${{ vars.DEPLOY_PATH }}
          git pull origin main
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build
          docker-compose exec -T app npx prisma migrate deploy
        EOF

    - name: Run database migrations
      run: |
        echo "Running database migrations for production..."
        # Add migration logic based on your deployment platform

    - name: Health check after deployment
      run: |
        sleep 30
        curl -f ${{ vars.PRODUCTION_URL }}/api/health || exit 1
        echo "Production deployment health check passed!"

  # Performance testing
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v11
      with:
        urls: |
          ${{ vars.PRODUCTION_URL }}
          ${{ vars.PRODUCTION_URL }}/api/health
        configPath: ./lighthouse-config.json
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && github.ref == 'refs/heads/main'

    steps:
    - name: Notify success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "🎉 Production deployment successful!"
        # Add notification logic (Slack, Discord, email, etc.)

    - name: Notify failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "❌ Production deployment failed!"
        # Add notification logic (Slack, Discord, email, etc.)
        exit 1