# Ultra-optimized Docker build for Next.js application
# Target: < 100MB production image

# Stage 1: Base image with minimal Node.js
FROM node:20-alpine AS base
RUN apk add --no-cache libc6-compat

# Stage 2: Install dependencies
FROM base AS deps
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Stage 3: Build stage with all dependencies
FROM base AS builder
WORKDIR /app
COPY package*.json ./
COPY prisma ./prisma/
RUN npm ci
COPY . .
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Build without Prisma initially to reduce dependencies
RUN npm run build:docker

# Stage 4: Runtime image
FROM node:20-alpine AS runtime
WORKDIR /app

# Install only curl for healthcheck
RUN apk add --no-cache curl

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy Next.js built files
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Copy only essential files
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/prisma ./prisma

# Install minimal runtime dependencies
RUN npm install --only=production prisma @prisma/client && \
    npx prisma generate && \
    npm cache clean --force && \
    rm -rf ~/.npm /tmp/* /var/cache/apk/* /usr/share/man /root/.config

# Set environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME=0.0.0.0

USER nextjs

EXPOSE 3000

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

CMD ["node", "server.js"]