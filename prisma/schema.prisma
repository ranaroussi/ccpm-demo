// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication and user management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Authentication fields
  emailVerified DateTime?
  password      String?

  // Profile fields
  bio           String?
  website       String?
  location      String?

  // Subscription/Plan fields
  plan          String   @default("free") // free, pro, enterprise
  planExpiresAt DateTime?

  // Status fields
  isActive      Boolean  @default(true)
  lastLoginAt   DateTime?

  // Relations
  accounts Account[]
  sessions Session[]
  posts    Post[]

  @@map("users")
}

// Account model for OAuth providers
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Session model for user sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Additional session data
  ipAddress    String?
  userAgent    String?
  lastActivity DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Verification token model for email verification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Post model for content management
model Post {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String?
  excerpt     String?
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  // SEO fields
  metaTitle       String?
  metaDescription String?

  // Author relation
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Tags
  tags PostTag[]

  @@map("posts")
}

// Tag model for post categorization
model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?  @default("#6B7280")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts PostTag[]

  @@map("tags")
}

// Many-to-many relation between Posts and Tags
model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("post_tags")
}
